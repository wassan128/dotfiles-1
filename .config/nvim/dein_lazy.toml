[[plugins]]
repo = 'Shougo/neocomplete'
if = "has('lua')"
on_i = 1

[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = "has('nvim')"
on_i = 1
hook_post_update = 'UpdateRemotePlugins'
hook_add = 'let g:deoplete#enable_at_startup = 1'

[[plugins]]
repo = 'osyo-manga/vim-over'
hook_add = '''
cnoreabb <silent><expr>s getcmdtype()==':' && getcmdline()=~'^s' ? 'OverCommandLine<CR><C-u>%s/<C-r>=get([], getchar(0), '')<CR>' : 's'
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
on_cmd = ['NERDTreeToggle', 'NERDTree']

# http://wakame.hatenablog.jp/?page=1494098253
[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = ['Denite', 'DeniteCursorWord']
hook_add = '''
" file_rec
nnoremap <silent> ,c :<C-u>Denite file_rec<CR>
" file_mru
nnoremap <silent> ,t :<C-u>Denite file_mru<CR>
" neoyank
nnoremap <silent> ,y :<C-u>Denite neoyank<CR>
" カーソル以下の単語をgrep
nnoremap <silent> ,G <C-u>DeniteCursorWord grep -buffer-name=search line<CR><C-R><C-W><CR>
" 普通にgrep
nnoremap <silent> ,g :<C-u>Denite -auto_preview -buffer-name=search -mode=normal grep<CR>
" 前回の検索結果
nnoremap <silent> ,r :<C-u>Denite -buffer-name=search -resume -mode=normal<CR>
" search
nnoremap <silent> ,/ :<C-u>Denite -buffer-name=search -auto-resize line<CR>
'''
hook_post_source = '''
" @see https://blog.scimpr.com/2018/04/15/vim8%E3%81%A7denite-nvim%E3%82%92%E3%81%A4%E3%81%8B%E3%81%86/
call denite#custom#source('file_rec', 'matchers', ['matcher_cpsm'])
call denite#custom#var('file_rec', 'command', ['rg', '--files', '--glob', '!.git'])
call denite#custom#var('grep', 'command', ['rg'])
call denite#custom#var('grep', 'default_opts', ['-i', '--vimgrep'])
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', [])
call denite#custom#var('grep', 'separator', ['--'])
call denite#custom#var('grep', 'final_opts', [])

" denite/insert モードのときは，UpDownで移動できるようにする
call denite#custom#map('insert', '<Down>', '<denite:move_to_next_line>')
call denite#custom#map('insert', '<Up>', '<denite:move_to_previous_line>')
" denite/insert モードのときは、RightLeftで過去の履歴
call denite#custom#map('insert', '<Right>', '<denite:assign_next_matched_text>')
call denite#custom#map('insert', '<Left>', '<denite:assign_previous_matched_text>')
 
" tabopen や vsplit のキーバインドを割り当て
call denite#custom#map('insert', '<C-t>', '<denite:do_action:tabopen>')
call denite#custom#map('insert', '<C-v>', '<denite:do_action:vsplit>')
call denite#custom#map('normal', 'v', '<denite:do_action:vsplit>')
'''

[[plugins]]
repo = 'nixprime/cpsm'
on_source = 'denite.nvim'
# on_cmd = ['Denite', 'DeniteCursorWord']
build = 'env PY3=ON ./install.sh'

[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = 'denite.nvim'
# on_cmd = ['Denite file_mru']

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_source = 'denite.nvim'
# on_cmd = ['Denite neoyank']

[[plugins]]
repo = 'jiangmiao/auto-pairs'
on_i = 1

[[plugins]]
repo = 'Shougo/neosnippet'
on_i = 1
hook_add = '''
" <TAB>: completion.
" inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<S-TAB>"
" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
"imap <expr><TAB>
" \ pumvisible() ? "\<C-n>" :
" \ neosnippet#expandable_or_jumpable() ?
" \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif
'''

[[plugins]]
repo = 'rking/ag.vim'
on_cmd = ['Ag', 'AgAdd', 'AgFromSearch', 'LAg', 'LAgAdd', 'AgFile', 'AgHelp']

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
depends = 'neosnippet'
on_i = 1

[[plugins]]
repo = 'h1mesuke/vim-alignta'
on_cmd = 'Alignta'

[[plugins]]
repo = 'kana/vim-niceblock'
on_i = 1

[[plugins]]
repo = 'kana/vim-operator-user'
on_map = '<Plug>(operator'

[[plugins]]
repo = 'kana/vim-operator-replace'
depends = 'vim-operator-user'
on_map = '<Plug>(operator-replace)'
hook_add = '''
  nmap s <Plug>(operator-replace)
'''

[[plugins]]
repo = 'scrooloose/nerdcommenter' # NERD Commenter: ,cs ,c<space> ,cc https://github.com/scrooloose/nerdcommenter
on_ft = ['vim', 'go', 'php', 'sh', 'html', 'css', 'c', 'cpp']
hook_add = '''
filetype plugin on
'''

[[plugins]]
repo = 't9md/vim-quickhl'
on_map = '<Plug>(quickhl-manual-this)'

[[plugins]]
repo = 'tpope/vim-surround'
on_i = 1

[[plugins]]
repo = 'thinca/vim-quickrun'
on_cmd = 'QuickRun'
hook_add = '''
let g:quickrun_config={'_': {
\   'split': 'vertical',
\   "outputter/buffer/split": ":rightbelow 8sp",
\   "runner" : "vimproc",
\   "runner/vimproc/updatetime" : 40,
\   "outputter/buffer/close_on_empty": 1,
\}}
let g:quickrun_config['markdown'] = {'outputter': 'browser'}
nnoremap <silent> <C-q> :QuickRun<CR>
nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = '<Plug>(EasyAlign)'
hook_add = '''
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'scrooloose/syntastic'
on_ft = ['go', 'php']

# ----------------------------------------
# language-specific

# html
[[plugins]]
repo = 'othree/html5.vim'
on_ft = 'html'
[[plugins]]
repo = 'mattn/emmet-vim' # emmet: <c-e>,
on_ft = ['html', 'css', 'php', 'markdown', 'scss']
on_map = ['<plug>(user_emmet_', '<plug>(emmet-']
hook_add = '''
let g:user_emmet_leader_key='<C-E>'
'''
[[plugins]]
repo = 'Valloric/MatchTagAlways'
on_ft = ['html', 'xhtml', 'xml', 'jinja']
hook_add = '''
let g:mta_use_matchparen_group = 1
'''
# markdown
[[plugins]]
repo = 'tyru/open-browser.vim'
# on_map = '<Plug>(openbrowser-'
# on_cmd = ['PrevimOpen', 'OpenBrowser', 'OpenBrowserSearch']
on_ft = 'markdown'
[[plugins]]
repo = 'kannokanno/previm'
on_ft = 'markdown'
on_cmd = 'PrevimOpen'

# toml
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

# Python
[[plugins]]
repo = 'zchee/deoplete-jedi'
depends = 'deoplete.nvim'
on_ft = 'python'

# go
[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
[[plugins]]
repo = 'zchee/deoplete-go'
depends = 'deoplete.nvim'
on_i = 1
on_ft = 'go'
[[plugins]]
repo = 'nsf/gocode'
rtp = 'nvim'
on_ft = 'go'
build = 'go get -u github.com/nsf/gocode; ~/.cache/dein.vim/repos/github.com/nsf/gocode/nvim/symlink.sh'
hook_add = '''
au BufNewFile,BufRead *.go set noexpandtab tabstop=4 shiftwidth=4 nolist
let g:go_fmt_command = 'goimports'
let g:go_fmt_fail_silently = 1
let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }
'''

# C/C++
[[plugins]]
repo = 'zchee/deoplete-clang'
depends = 'deoplete.nvim'
on_ft = ['c', 'cpp']

# PowerShell
[[plugins]]
repo = 'PProvost/vim-ps1'
on_ft = 'ps1'

# Rust
[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'

# Terraform, HCL
[[plugins]]
repo = 'hashivim/vim-terraform'
on_ft = ['tf', 'tfvars', 'tfstate', 'hcl']
hook_add = '''
let g:terraform_fmt_on_save = 1
'''

# Packer
[[plugins]]
repo = 'hashivim/vim-packer'
on_ft = 'json'

# Vagrant
[[plugins]]
repo = 'hashivim/vim-vagrant'
on_ft = ['Vagrantfile', 'ruby']

# fluentd
[[plugins]]
repo = 'yoppi/fluentd.vim'
on_ft = ['conf', 'fluentd']

# coffee
[[plugins]]
repo = 'kchmck/vim-coffee-script'
on_ft = ['coffee']

# handlebars
[[plugins]]
repo = 'mustache/vim-mustache-handlebars'
on_ft = ['mustache', 'handlebars']

# jinja2
[[plugins]]
repo = 'lepture/vim-jinja'
on_ft = 'jinja'
