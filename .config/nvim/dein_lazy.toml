[[plugins]]
repo = 'Shougo/neocomplete'
if = "has('lua')"
on_i = 1

[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = "has('nvim')"
on_i = 1
hook_post_update = 'UpdateRemotePlugins'
hook_add = 'let g:deoplete#enable_at_startup = 1'

[[plugins]]
repo = 'osyo-manga/vim-over'
hook_add = '''
cnoreabb <silent><expr>s getcmdtype()==':' && getcmdline()=~'^s' ? 'OverCommandLine<CR><C-u>%s/<C-r>=get([], getchar(0), '')<CR>' : 's'
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
on_cmd = ['NERDTreeToggle', 'NERDTree']

[[plugins]]
repo = 'Shougo/neomru.vim'
depends = 'unite.vim'
on_cmd = ['Unite', 'UniteResume']

[[plugins]]
repo = 'Shougo/unite.vim'
on_ft = ['snippet', 'unite']
on_cmd = ['Unite', 'UniteResume']
hook_add = '''
" @see http://blog.monochromegane.com/blog/2013/09/18/ag-and-unite/
" insert modeで開始
" let g:unite_enable_start_insert = 1

" 大文字小文字を区別しない
let g:unite_enable_ignore_case = 1
let g:unite_enable_smart_case = 1

" grep検索
nnoremap <silent> ,g  :<C-u>Unite grep:. -buffer-name=search-buffer<CR>

" カーソル位置の単語をgrep検索
nnoremap <silent> ,cg :<C-u>Unite grep:. -buffer-name=search-buffer<CR><C-R><C-W>

" grep検索結果の再呼出
nnoremap <silent> ,r  :<C-u>UniteResume search-buffer<CR>

" unite grep に ag(The Silver Searcher) を使う
if executable('ag')
  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts = '--nogroup --nocolor --column'
  let g:unite_source_grep_recursive_opt = ''
endif
'''

[[plugins]]
repo = 'Shougo/neoyank.vim'
depends = 'unite.vim'
on_ft = ['snippet', 'unite']
on_cmd = ['Unite', 'UniteResume']

[[plugins]]
repo = 'jiangmiao/auto-pairs'
on_i = 1

[[plugins]]
repo = 'Shougo/neosnippet'
on_i = 1
hook_add = '''
" <TAB>: completion.
" inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<S-TAB>"
" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
"imap <expr><TAB>
" \ pumvisible() ? "\<C-n>" :
" \ neosnippet#expandable_or_jumpable() ?
" \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif
'''

[[plugins]]
repo = 'rking/ag.vim'
on_cmd = ['Ag', 'AgAdd', 'AgFromSearch', 'LAg', 'LAgAdd', 'AgFile', 'AgHelp']

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
depends = 'neosnippet'
on_i = 1

[[plugins]]
repo = 'h1mesuke/vim-alignta'
on_cmd = 'Alignta'

[[plugins]]
repo = 'kana/vim-niceblock'
on_i = 1

[[plugins]]
repo = 'kana/vim-operator-user'
on_map = '<Plug>(operator'

[[plugins]]
repo = 'kana/vim-operator-replace'
depends = 'vim-operator-user'
on_map = '<Plug>(operator-replace)'
hook_add = '''
  nmap s <Plug>(operator-replace)
'''

[[plugins]]
repo = 'scrooloose/nerdcommenter' # NERD Commenter: ,cs ,c<space> ,cc https://github.com/scrooloose/nerdcommenter
on_ft = ['vim', 'go', 'php', 'sh', 'html', 'css', 'c', 'cpp']
hook_add = '''
filetype plugin on
'''

[[plugins]]
repo = 't9md/vim-quickhl'
on_map = '<Plug>(quickhl-manual-this)'

[[plugins]]
repo = 'tpope/vim-surround'
on_i = 1

[[plugins]]
repo = 'thinca/vim-quickrun'
on_cmd = 'QuickRun'
hook_add = '''
let g:quickrun_config={'_': {
\   'split': 'vertical',
\   "outputter/buffer/split": ":rightbelow 8sp",
\   "runner" : "vimproc",
\   "runner/vimproc/updatetime" : 40,
\   "outputter/buffer/close_on_empty": 1,
\}}
let g:quickrun_config['markdown'] = {'outputter': 'browser'}
nnoremap <silent> <C-q> :QuickRun<CR>
nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = '<Plug>(EasyAlign)'
hook_add = '''
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'scrooloose/syntastic'
on_ft = ['go', 'php']

# ----------------------------------------
# language-specific

# html
[[plugins]]
repo = 'othree/html5.vim'
on_ft = 'html'
[[plugins]]
repo = 'mattn/emmet-vim' # emmet: <c-e>,
on_ft = ['html', 'css', 'php', 'markdown', 'scss']
on_map = ['<plug>(user_emmet_', '<plug>(emmet-']
hook_add = '''
let g:user_emmet_leader_key='<C-E>'
'''
[[plugins]]
repo = 'Valloric/MatchTagAlways'
on_ft = ['html', 'xhtml', 'xml', 'jinja']
hook_add = '''
let g:mta_use_matchparen_group = 1
'''
# markdown
[[plugins]]
repo = 'tyru/open-browser.vim'
# on_map = '<Plug>(openbrowser-'
# on_cmd = ['PrevimOpen', 'OpenBrowser', 'OpenBrowserSearch']
on_ft = 'markdown'
[[plugins]]
repo = 'kannokanno/previm'
on_ft = 'markdown'
on_cmd = 'PrevimOpen'

# toml
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

# Python
[[plugins]]
repo = 'zchee/deoplete-jedi'
depends = 'deoplete.nvim'
on_ft = 'python'

# go
[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
[[plugins]]
repo = 'zchee/deoplete-go'
depends = 'deoplete.nvim'
on_i = 1
on_ft = 'go'
[[plugins]]
repo = 'nsf/gocode'
rtp = 'nvim'
on_ft = 'go'
build = 'go get -u github.com/nsf/gocode; ~/.cache/dein.vim/repos/github.com/nsf/gocode/nvim/symlink.sh'
hook_add = '''
au BufNewFile,BufRead *.go set noexpandtab tabstop=4 shiftwidth=4 nolist
let g:go_fmt_command = 'goimports'
let g:go_fmt_fail_silently = 1
let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }
'''

# C/C++
[[plugins]]
repo = 'tweekmonster/deoplete-clang2'
depends = 'deoplete.nvim'
on_ft = ['c', 'cpp']

# PowerShell
[[plugins]]
repo = 'PProvost/vim-ps1'
on_ft = 'ps1'

# Rust
[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'

# Terraform, HCL
[[plugins]]
repo = 'hashivim/vim-terraform'
on_ft = ['tf', 'tfvars', 'tfstate', 'hcl']
hook_add = '''
let g:terraform_fmt_on_save = 1
'''

# Packer
[[plugins]]
repo = 'hashivim/vim-packer'
on_ft = 'json'

# Vagrant
[[plugins]]
repo = 'hashivim/vim-vagrant'
on_ft = ['Vagrantfile', 'ruby']

# fluentd
[[plugins]]
repo = 'yoppi/fluentd.vim'
on_ft = ['conf', 'fluentd']

# coffee
[[plugins]]
repo = 'kchmck/vim-coffee-script'
on_ft = ['coffee']

# handlebars
[[plugins]]
repo = 'mustache/vim-mustache-handlebars'
on_ft = ['mustache', 'handlebars']
